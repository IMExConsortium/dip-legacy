package edu.ucla.mbi.dip;

/* =============================================================================
 * $Id:: DipDxfSet.java 2191 2012-04-24 00:47:31Z lukasz                       $
 * Version: $Rev:: 2191                                                        $
 *==============================================================================
 *
 *  DipDxfSet - sets DIP records 
 *
 *    NOTES:
 *
 *=========================================================================== */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.*;
import java.io.*;

import edu.ucla.mbi.dip.*;
import edu.ucla.mbi.dxf14.*;
import edu.ucla.mbi.orm.*;


/*
import org.w3c.dom.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.hibernate.*;

import javax.xml.bind.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.GregorianCalendar;
import java.util.List;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.datatype.DatatypeConfigurationException;

// import java content classes generated by binding compiler

import static javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;

import javax.xml.parsers.*;
*/

import javax.xml.xpath.*;
import org.xml.sax.*;
import javax.xml.namespace.*;

public class DipDxfSet{

    static NodeDAO     nDAO = null;
    static LNodeDAO   lnDAO = null;
    static OrganismDAO oDAO = null;
    static CvtDAO      cvtDAO    = null;
    static CvTermDAO   cvTermDAO = null;
    static LinkDAO     lDAO = null;
    static EvidDAO     xDAO = null;
    static InferDAO  infDAO = null;
    static DataSrcDAO  sDAO = null;
    static ImexSRecDAO     imexDAO = null;
    static DipSRecDAO   dipSRecDAO = null;

    static DipDataSrcDAO  ddsDAO = null;

    static edu.ucla.mbi.dxf14.ObjectFactory dxfFactory
	= new edu.ucla.mbi.dxf14.ObjectFactory();
    

    /*
    public Document setDipSRec(Document request)
        throws java.rmi.RemoteException {

	Log log = LogFactory.getLog(DipSOAPBindingPrivateImpl.class);
        log.debug("DipSOAP: setDipSR called");
	
        DatasetType res = dxfFactory.createDatasetType();
	
	int _id=0;
	
        // get parameters
        //---------------
        String ns   = DipSOAPUtil.getSingleParameter(request, "ns"    ,"dip");
        String ac   = DipSOAPUtil.getSingleParameter(request, "ac"    ,"");
        String mif  = DipSOAPUtil.getSingleParameter(request, "mif"   ,"");

	log.debug("DipSOAP:    node(evid-ns): "+ns);
	log.debug("DipSOAP:    node(evid-ac): "+ac);
	log.debug("DipSOAP:    node(mif-sze): "+mif.length());
	
	if(ac.length()>0 &&
	   ns.equals("dip")  &&
	   mif.length()>0){

	    log.debug("DipSOAP:    dip info complete: testing");

	    long xid=-1;
	    
	    try{
		ac=ac.replaceAll("[^0-9]","");
		xid=Long.parseLong(ac);
	    } catch(NumberFormatException ne){
		log.debug(ne,ne);
	    }
	    
	    // test if evidence defined
	    //-------------------------
	    
	    if(xDAO==null){
		log.debug("DipSOAP:   Creating EvidDAO...");
		xDAO=new EvidDAO();
	    }

	    Evidence evid=xDAO.find(xid);
	    if(evid!=null){

		log.debug("DipSOAP:   evidence found: "+evid.getAccession());
		log.debug("DipSOAP:   DipSR record: SUBMITTING");
		



		DipSRec newDipSR = new DipSRec();
		newDipSR.setEvidence(evid);
		newDipSR.setMif(mif);
		

		if(dipSRecDAO==null){
		    log.debug("DipSOAP:   Creating DipSRecDAO...");
		    dipSRecDAO=new DipSRecDAO();
		}

		log.debug("DipSOAP:   testing for DipSRec presence");
		
                List sl=dipSRecDAO.findByEvidId(evid.getId());
		
                if(sl.size()<1){
		    
		    // submit
		    //-------

		    dipSRecDAO.create(newDipSR);

		    // reload evid
		    //------------

		    evid=xDAO.find(xid);

		    res.getNode().add(DipSOAPUtil.dip2dxf(evid,_id++,1));
		} else {
		    log.debug("DipSOAP:    DipSRec already present");
		}
	    }
	    log.debug("DipSOAP:    ------------------------ "); 
	}

	log.debug("DipSOAP: DONE:setDipSR");
        return DipSOAPUtil.dts2doc(res);	
    }
    */
    
    //--------------------------------------------------------------------------
    
    public static String setImexSRec( String ns, String ac,
                                      String imex, String mif,
                                      String imex254, String mif254 ){
	
	Log log = LogFactory.getLog( DipDxfSet.class );
        log.debug( "DipSOAP: setImexSRec called" );
	String res = "";
	
	log.debug( "DipSOAP:    node(evid-ns): "+ns);
	log.debug( "DipSOAP:    node(evid-ac): "+ac);
	log.debug( "DipSOAP:    node(imex)   : "+imex);
	log.debug( "DipSOAP:    node(imex254)   : "+imex254);
	log.debug( "DipSOAP:    node(mif-sze): "+mif254.length());
	log.debug( "DipSOAP:    node(mif254):"+mif254);
	
	if( (imex254.length()>0 || imex.length()>0 ) 
            && ac.length()>0 
            && ns.equals("dip")  
            && mif254.length()>0 ){

	    log.debug( "DipSOAP:    imex/mif debug complete: testing" );

            org.xml.sax.InputSource xmlIsSource 
		= new org.xml.sax.InputSource(new StringReader(mif254));
	    
            //DOMParser p=new DOMParser();
            
            org.w3c.dom.Document inDoc=null;
	    
	    int imexSrc=0;

            try{
                //p.parse(xmlIsSource);
                //inDoc=p.getDocument();
		
		//xmlns:mif="http://psi.hupo.org/mi/mif"

		XPath xpath = XPathFactory.newInstance().newXPath();
		NamespaceContextImpl namespaceContext = new NamespaceContextImpl();
		namespaceContext.setUri("http://psi.hupo.org/mi/mif");
		namespaceContext.setPrefix("mif");

		xpath.setNamespaceContext(namespaceContext);
		//log.debug("DipSOAP: getUri:"+namespaceContext.getNamespaceURI("")+":");
		//log.debug("DipSOAP: getPrefix:" 
                // + namespaceContext.getPrefix("http://psi.hupo.org/mi/mif")+":");
		
		String expression = "//mif:source/mif:xref/mif:primaryRef/@id"; 

	        log.debug("DipSOAP: expression->"+expression);
		XPathExpression xx=xpath.compile(expression);
                
		String imexSTR = xx.evaluate(xmlIsSource);
		//    = (String) xpath.evaluate(expression, 
		//					inDoc, 
		//					XPathConstants.STRING);

		log.debug("DipSOAP: imexSTR->"+imexSTR);
	
		if(imexSTR!=null && imexSTR.equals("MI:0465")){
		    imexSrc=1;
		}if(imexSTR!=null && imexSTR.equals("MI:0469")){
		    imexSrc=2;
		}if(imexSTR!=null && imexSTR.equals("MI:0471")){
		    imexSrc=3;
		}

                // get 

            } catch(Exception e){
                // ABORT: problems reading input
                log.debug("DipSOAP:  MIF parsing problems");
                log.debug(e,e);
                log.debug("DipSOAP:  MIF parsing problems");
            }
	    
	    long xid=-1;
	    
	    try{
		ac=ac.replaceAll("[^0-9]","");
		xid=Long.parseLong(ac);
	    } catch(NumberFormatException ne){
		log.debug(ne,ne);
	    }
	    
	    // test if evidence defined
	    //-------------------------
	    
	    if(xDAO==null){
		log.debug("DipSOAP:   Creating EvidDAO...");
		xDAO=new EvidDAO();
	    }

	    Evidence evid=xDAO.find(xid);
	    if( evid!=null ){
                
		log.debug( "DipSOAP:   evidence found: "+evid.getAccession());

		String evSrc=evid.getSource().getAc();

		/*

		if(ddsDAO==null){
		    log.debug("DipSOAP:   Creating DataSrcDAO...");
                    ddsDAO=new DipDataSrcDAO();
                }
		
		DipDataSource  dds= ddsDAO.findByPmid(evSrc);
		
		if(dsl.size()>0){
		    DataSrc ds= (DataSrc) dsl.get(0);
		    ds.setImexSrc(imexSrc);
		    sDAO.saveOrUpdate(ds);

		    log.debug("DipSOAP:   updated imex source");
		}

		*/

		ImexSRec newImex = new ImexSRec();
		newImex.setEvidId(evid.getId());
		if(imex254!=null && imex254.length()>0){
		    newImex.setImex254(imex254);
		} else {
		    newImex.setImex254("");
		}
		if(imex!=null && imex.length()>0){
		    try{
			newImex.setImexId(Long.valueOf(imex.replaceAll("[^0-9]","")));
		    } catch(Exception e) {
			
		    }
		} 
		newImex.setMif254(mif254);
		newImex.setDts(imexSrc);
		
		if(imexDAO==null){
		    log.debug("DipSOAP:   Creating ImexSRecDAO...");
		    imexDAO=new ImexSRecDAO();
		}

		log.debug("DipSOAP:   testing for ImexSRec presence");
		
		List sl=imexDAO.findByEvidId(evid.getId());

		if(sl.size()<1){
		   
		    // submit
		    //-------

		    log.debug("DipSOAP:   imex record: SUBMITTING");
		    imexDAO.create(newImex);
		    res=newImex.getMif254();
		    
		} else {
		    log.debug("DipSOAP:    ImexSRec already present");
		}
	    }
	    log.debug("DipSOAP:    ------------------------ "); 
	}
	
	log.debug("DipSOAP: DONE:setImex");
        return 	res;
    }


    //--------------------------------------------------------------------------
    
    public static String dropImexSRec( String ns, String ac ){
	
	Log log = LogFactory.getLog(DipDxfSet.class);
        log.debug("DipSOAP: dropImexSRec called");
	
        String res = "";
	
	log.debug("DipSOAP:    node(evid-ns): "+ns);
	log.debug("DipSOAP:    node(evid-ac): "+ac);
	
	ImexSRec oldImex= null;
	
	if(ac!=null && ac.length()>0 && ns!=null && ns.length()>0){
	    if(ns.equals("dip")){
		log.debug("DipSOAP:    drop by dip ac");
		long xid=-1;
		try{
		    ac=ac.replaceAll("[^0-9]","");
		    xid=Long.parseLong(ac);
		} catch(NumberFormatException ne){
		    log.debug(ne,ne);
		}	    
		Evidence evid=xDAO.find(xid);
		if(evid!=null){
		    log.debug("DipSOAP:   evidence found: "+evid.getAccession());
		    if(imexDAO==null){
			log.debug("DipSOAP:   Creating ImexSRecDAO...");
			imexDAO=new ImexSRecDAO();
		    }
		    List oldImexList = imexDAO.findByEvidId(xid);
		    if(oldImexList!=null && oldImexList.size()==1){
			oldImex= (ImexSRec) oldImexList.get(0);
		    }
		}
	    }

	    if(ns.equals("imex")){
		if(imexDAO==null){
		    log.debug("DipSOAP:   Creating ImexSRecDAO...");
		    imexDAO=new ImexSRecDAO();
		}
		List oldImexList = imexDAO.findByImex254(ac);
		if(oldImexList!=null && oldImexList.size()==1){
		    oldImex= (ImexSRec) oldImexList.get(0);
		}
	    }
	    
	    if(oldImex!=null){
		res=oldImex.getMif254();
		imexDAO.delete(oldImex);
	    }
	}
	log.debug("DipSOAP: DONE:setImex");
        return res;	
    }

    //--------------------------------------------------------------------------

    public static edu.ucla.mbi.dxf14.DatasetType
	setEvidence( edu.ucla.mbi.dxf14.DatasetType reqNodes ){

	//    public Document setEvidence(Document request)
	//	throws java.rmi.RemoteException {
	
	Log log = LogFactory.getLog( DipDxfSet.class );
        log.debug("DipSOAP: setEvidence called");
	
	int cn=0;
	int _id=0;
	
        DatasetType res = dxfFactory.createDatasetType();
 
	// go over nodes

	for(Iterator i=reqNodes.getNode().iterator();i.hasNext();){
	    
	    NodeType dxfNode= (NodeType)i.next();
	    
	    log.debug("DipSOAP:    ------------------------ "); 
	    log.debug("DipSOAP:    node["+cn+"]");
	    log.debug("DipSOAP:    node(label): "+dxfNode.getLabel()); 
	    
	    cn++;
	    
	    // test if evidence
	    //-----------------

	    if(dxfNode.getType().getNs().equals("dxf") &&
	       dxfNode.getType().getAc().equals("dxf:0015")){
		
		String ndLabel=dxfNode.getLabel();
		String ndName =dxfNode.getName();
		
		// test if targeted to dip with no accession
		
		if(dxfNode.getNs().equals("dip") &&
		   dxfNode.getAc().equals("")){

		    log.debug("DipSOAP:    node(name): "+dxfNode.getName()); 
		    log.debug("DipSOAP:    node(type): "+dxfNode.getType().getAc()); 
		    log.debug("DipSOAP:    node(ns)  : "+dxfNode.getNs()); 
		    log.debug("DipSOAP:    node(ac)  : "+dxfNode.getAc()); 

		    //  get: -  link
		    //       -  pmid
		    //       -  int type
                    //       -  detection method
                    //       -  scale

		    String exLnkAc="";
		    String exPmId ="";
		    String exIntTp="";
		    String exIntTpName="";
		    String exDtMth="";
		    String exDtMthName="";
		    String exScale="";
		    String exScaleName="";

		    if(dxfNode.getXrefList()!=null){

			log.debug("DipSOAP:    node:xrefList");

			for(Iterator j
				= dxfNode.getXrefList().getXref().iterator();
			    j.hasNext();){

			    XrefType dxfXref= (XrefType)j.next();
			    
			    if(dxfXref.getTypeNs().equals("dxf") &&
			       dxfXref.getTypeAc().equals("dxf:0013") &&
			       dxfXref.getNs().equals("dip")){
			       
				exLnkAc=dxfXref.getAc();
			    } 

			    if(dxfXref.getTypeNs().equals("dxf") &&
			       dxfXref.getTypeAc().equals("dxf:0014") &&
			       dxfXref.getNs().toLowerCase().equals("pubmed")){
				    
				exPmId=dxfXref.getAc();
			    }
			}
		    }

		    if(dxfNode.getAttrList()!=null){

			log.debug("DipSOAP:    node:attrList");

			for(Iterator j
				= dxfNode.getAttrList().getAttr().iterator();
			    j.hasNext();){

			    AttrType dxfAttr= (AttrType)j.next();

			    if(dxfAttr.getNs().equals("dip") &&
			       dxfAttr.getAc().equals("dip:0001") &&
			       dxfAttr.getValue()!=null){
				
				exIntTp=dxfAttr.getValue().getAc();
				exIntTpName=dxfAttr.getValue().getValue();
			    }

			    if(dxfAttr.getNs().equals("psi-mi") &&
			       dxfAttr.getAc().equals("MI:0001") &&
			       dxfAttr.getValue()!=null){
				
				exDtMth=dxfAttr.getValue().getAc();
				exDtMthName=dxfAttr.getValue().getValue();
			    }


			    if(dxfAttr.getNs().equals("dip") &&
			       dxfAttr.getAc().equals("dip:0003") &&
			       dxfAttr.getValue()!=null){
				
				exScale=dxfAttr.getValue().getAc();
				exScaleName=dxfAttr.getValue().getValue();
			    }
			}
		    }

		    log.debug("DipSOAP:    node(link): "+exLnkAc);
		    log.debug("DipSOAP:    node(pubmed): "+exPmId);
		    log.debug("DipSOAP:    node(detect): "+exDtMth);
		    log.debug("DipSOAP:    node(type)  : "+exIntTp);
		    log.debug("DipSOAP:    node(scale) : "+exScale);
		    		    
		    if(exLnkAc.length()>0 &&
		       exPmId.length()>0  &&
		       exDtMth.length()>0 &&
		       exIntTp.length()>0 &&
		       exScale.length()>0){

			log.debug("DipSOAP:    evidence OK: testing... ");
			
			long lid=-1;
			
			try{
			    exLnkAc=exLnkAc.replaceAll("[^0-9]","");
			    lid=Long.parseLong(exLnkAc);
			} catch(NumberFormatException ne){
			    log.debug(ne,ne);			    
			}
				
		    				    
			// test if link defined
                        //---------------------

                        if(lDAO==null){
                            log.debug("DipSOAP:   Creating LinkDAO...");
                            lDAO=new LinkDAO();
                        }

                        Link lnk=lDAO.find(lid);
			if(lnk!=null){
			    log.debug("DipSOAP:   link found: "+lnk.getAccession());
			}
			
                        log.debug("DipSOAP:   link search done");
			
			// test if datasource defined
			//---------------------------
			
			if(ddsDAO==null){
                            log.debug("DipSOAP:   Creating DataSrcDAO...");
                            ddsDAO=new DipDataSrcDAO();
                        }

			// List  dsLst = ddsDAO.findByPmid(exPmId);
			DataSrc dts = null;
			dts=ddsDAO.findByPmid(exPmId);
			//if(dsLst.size()==0){
			if(dts==null){
			    log.debug("DipSOAP:   no data source: "+exPmId);
			    // new pmid - build/commit 

			    exPmId=exPmId.replaceAll("\\s","");
			    exPmId=exPmId.replaceAll("[^0-9]","");

			    if(exPmId.length()>0){

				DipDataSrc nDts= new DipDataSrc();
				nDts.setPmid(exPmId);

				if(cvtDAO==null){
				    log.debug("DipSOAP:   Creating CvtDAO...");
				    cvtDAO=new CvtDAO();
				    log.debug("DipSOAP:   ...done");
				}

				CvType nCvt = null;

				List lCvt = cvtDAO.findByName("data-source");
				if(lCvt.size()==1){
				    nCvt= (CvType) lCvt.get(0);
				}

				// create new data source

				nDts.setCvType(nCvt);
				ddsDAO.create(nDts);
				
				log.debug("DipSOAP:   new data source: "+nDts.getAccession());
				dts=nDts;
			    }
			}
			/*
			if(dsLst.size()==1){
			    dts = (DataSrc)dsLst.get(0);
			    log.debug("DipSOAP:   found data source: "+dts.getAccession());
			}

			if(dsLst.size()>1){
			    for(int dsi=0;dsi<dsLst.size();dsi++){
				DataSrc ds= (DataSrc) dsLst.get(dsi);
				log.debug("DipSOAP: id="+ds.getId());
				log.debug("DipSOAP: tp="+ds.getType());
				log.debug("DipSOAP: pm="+ds.getPmid());
				log.debug("DipSOAP: lb="+ds.getLabel());
				log.debug("DipSOAP: nm="+ds.getName());				
			    }
			    log.debug("DipSOAP:   too many data sources"+dsLst.size());
			}
			*/
			if(lnk!=null && dts!=null){
			    
			    Evidence newEvid = new Evidence();
			    newEvid.setLink(lnk);
			    newEvid.setDataSrc(dts);
			    
			    // evidence type
			    //--------------

			    log.debug("DipSOAP:   setting evidence type");

			    CvType evType= null;
			    
			    if(cvtDAO==null){
				log.debug("DipSOAP:   Creating CvtDAO...");
				cvtDAO=new CvtDAO();
				log.debug("DipSOAP:   ...done");
			    }
			    
			    List evtlCvt = cvtDAO.findByName("evidence");
			    
			    log.debug("DipSOAP: (lsz) "+evtlCvt.size());

			    if(evtlCvt.size()==1){
				evType= (CvType) evtlCvt.get(0);
				newEvid.setEvidType(evType);
			    }

			    // interaction detection method
			    //-----------------------------

			    log.debug("DipSOAP:   setting detection method");

			    CvType ndm=  new CvType();
			    ndm.setAc(exDtMth);
			    newEvid.setDetMethod(ndm);
			    
			    if(cvTermDAO==null){
				log.debug("DipSOAP:   Creating CvTermDAO...");
				cvTermDAO=new CvTermDAO();
				log.debug("DipSOAP:   ...done");
			    }
			    
			    CvTerm cvtDetMeth = cvTermDAO.find(exDtMth);
			    
			    if(cvtDetMeth==null){
				cvtDetMeth =  new CvTerm();
				
				cvtDetMeth.setCvId(exDtMth);
				cvtDetMeth.setName(exDtMthName);
				
				cvTermDAO.create(cvtDetMeth);
			    }
    
			    newEvid.setCvtDetMethod(cvtDetMeth);
			    
			    // interaction type detected
			    //--------------------------

			    log.debug("DipSOAP:   setting detected interaction type");
			    
			    //CvType ndt=  new CvType();
			    //ndt.setAc(exDtMth);
			    //newEvid.setDetMethod(ndm);
			    			
			    
			    if(cvTermDAO==null){
				log.debug("DipSOAP:   Creating CvTermDAO...");
				cvTermDAO=new CvTermDAO();
				log.debug("DipSOAP:   ...done");
			    }
			    
			    CvTerm cvtDetTpe = cvTermDAO.find(exIntTp);
			    
			    if(cvtDetTpe==null){
				cvtDetTpe =  new CvTerm();
				
				cvtDetTpe.setCvId(exIntTp);
				cvtDetTpe.setName(exIntTpName);
				
				cvTermDAO.create(cvtDetTpe);
			    }
    
			    newEvid.setCvtDetType(cvtDetTpe);

                            // interaction experiment scale
                            //-----------------------------
			    
			    CvType nps=  new CvType();
                            nps.setAc(exScale); 
                            newEvid.setEvidScale(nps);
			    
			    // experiment scale
			    //-----------------

			    log.debug("DipSOAP:   setting experiment scale");
			    
			    if(cvTermDAO==null){
				log.debug("DipSOAP:   Creating CvTermDAO...");
				cvTermDAO=new CvTermDAO();
				log.debug("DipSOAP:   ...done");
			    }
			    
			    CvTerm cvtExpScale = cvTermDAO.find(exScale);

			    if(cvtExpScale==null){
				cvtExpScale =  new CvTerm();
				
				cvtExpScale.setCvId(exScale);
				cvtExpScale.setName(exScaleName);
				
				cvTermDAO.create(cvtExpScale);
			    }
    
			    newEvid.setCvtExpScale(cvtExpScale);
			    
			    log.debug("DipSOAP:   new evidence: SUBMITTING");

			    if(xDAO==null){
				log.debug("DipSOAP:   Creating EvidDAO...");
				xDAO=new EvidDAO();
			    }
			    
			    xDAO.create(newEvid);
			    
			    log.debug("DipSOAP:   new accession: "+newEvid.getAccession());
			    DxfLevel mode=DxfLevel.fromString("full");
			    res.getNode().add(DipDxfEvidUtil.dip2dxf(newEvid,_id++,mode));
			}
		    }		    
		}	
	    }
	    log.debug("DipSOAP:    ------------------------ "); 
	}

	log.debug("DipSOAP: DONE:setEvidence");
        return res;	
    }
    
    //--------------------------------------------------------------------------
    
    public static edu.ucla.mbi.dxf14.DatasetType dropEvidence( String ns, 
                                                               String ac ){
	
	Log log = LogFactory.getLog(DipDxfSet.class);
        log.debug( "DipSOAP: dropEvidence called: ns=" + ns + "  ac=" + ac );
	
        DatasetType res = dxfFactory.createDatasetType();

	// get evidence & Imex

	if(xDAO==null){
	    log.debug("DipSOAP:   Creating EvidDAO...");
	    xDAO=new EvidDAO();
	}
	
	Long xid=null;
	
	if( ns!=null && ac!=null && ns.equals("dip") ){
	    try{
                ac = ac.replaceAll("[^0-9]","");
                xid = Long.parseLong(ac);
            } catch( NumberFormatException ne ){
                log.debug( ne, ne );
            }
            
	    Evidence oldEv =null;
	    log.debug("DipSOAP: dropEvidence xid="+xid);
	    if( xid!=null ){
		oldEv = xDAO.find( xid );
		
		if(oldEv==null){
		    return res;		       	    
		}

		if(oldEv.getImex254()!=null && 
		   oldEv.getImex254().length()>0){
		    return res;
		}

		if(oldEv.getImexId()!=null &&
                   oldEv.getImexId().longValue()>0){
                    return res;
                }
	    }
	    
	    if(oldEv!=null){
		DxfLevel mode=DxfLevel.fromString("full");
		res.getNode().add(DipDxfEvidUtil.dip2dxf(oldEv,1,mode));
		xDAO.delete(oldEv);
	    } else {
	    
	    // if evid not null & imex null drop
	    // else throw up
	
		
	    }
	}

	log.debug("DipSOAP: DONE:dropEvidence");
        return res;	
    }

    //--------------------------------------------------------------------------

    public static edu.ucla.mbi.dxf14.DatasetType
        setSource( edu.ucla.mbi.dxf14.DatasetType req, String mode ){
       
        Log log = LogFactory.getLog( DipDxfSet.class );
        log.debug( "DipSOAP: setSource called" );
	
	int cn=0;
	int _id=0;
	
        DatasetType res = dxfFactory.createDatasetType();
 	// go over nodes
        
	for( Iterator i = req.getNode().iterator(); i.hasNext(); ){
            
	    NodeType dxfNode= (NodeType)i.next();
	    
	    log.debug("DipSOAP:    ------------------------ "); 
	    log.debug("DipSOAP:    node["+cn+"]");
	    log.debug("DipSOAP:    node(label): "+dxfNode.getLabel()); 
	    
	    cn++;
            
	    // skip: not a source node
	    //------------------------

	    if( !(dxfNode.getType().getNs().equals("dxf") &&
                  dxfNode.getType().getAc().equals("dxf:0016") ) )  continue;
            
            String ndLabel=dxfNode.getLabel();
            String ndName =dxfNode.getName();
		
            // skip: update with no dip accession
            //-----------------------------------
                 
            if( dxfNode.getNs().equals("dip") &&   
                dxfNode.getAc().equals("") &&
                mode != null && mode.equals( "update") ) continue;
                
            log.debug("DipSOAP:    node(name): "+dxfNode.getName()); 
            log.debug("DipSOAP:    node(type): "+dxfNode.getType().getAc()); 
            log.debug("DipSOAP:    node(ns)  : "+dxfNode.getNs()); 
            log.debug("DipSOAP:    node(ac)  : "+dxfNode.getAc()); 
                
            //  get: - pmid
            //       - authors
            //       - title
            //       - journal title
            //       - volume
            //       - issue
            //       - pages
            //       - year
            //       - abstract

            int srImexSrc = 0;  // pre-imex dip?
            String srAc = dxfNode.getAc();
            log.debug("DipSOAP:      source ac=" + srAc );
            String srPmid = "";
            String srAuthors = "";
            String srTitle = "";
            String srJTitle = "";
            String srVolume = "";
            String srIssue = "";
            String srPages = "";
            String srYear = "";
            int srIYear = 0;
            String srAbst = "";

            //------------------------------------------------------------------

            if(dxfNode.getXrefList()!=null){
                log.debug("DipSOAP:    node:xrefList");
                
                for( Iterator j = dxfNode.getXrefList().getXref().iterator();
                     j.hasNext(); ){
                    
                    XrefType dxfXref= (XrefType)j.next();
			    
                    // pmid
                    //-----
                    
                    if(dxfXref.getTypeNs().equals("dxf") &&
                       dxfXref.getTypeAc().equals("dxf:0009") &&
                       dxfXref.getNs().equals("pubmed")){
			       
                        srPmid = dxfXref.getAc();
                        log.debug("DipSOAP:     pmid=" + srPmid );
                    } 
                    
                    // curated-by (record source)
                    //---------------------------
                    if( dxfXref.getTypeNs().equals("dxf") &&
                        dxfXref.getTypeAc().equals("dxf:0055") ){
                        String crac = dxfXref.getAc();
                        if( crac.equals( "MI:0465" ) ){
                            srImexSrc = 1; }  // dip
                        if( crac.equals( "MI:0469" ) ){
                            srImexSrc = 2; }  // dip
                        if( crac.equals( "MI:0471" ) ){
                            srImexSrc = 3; }  // dip  
                    }
                }
            }
            
            //------------------------------------------------------------------

            if( dxfNode.getAttrList()!=null ){

                log.debug("DipSOAP:    node:attrList");

                for( Iterator j = dxfNode.getAttrList().getAttr().iterator();
                     j.hasNext(); ){

                    AttrType dxfAttr= (AttrType)j.next();

                    if( dxfAttr.getNs().equals("dip") &&
                        dxfAttr.getAc().equals("dip:0004") &&
                        dxfAttr.getValue()!=null ){
			
                        srTitle = dxfAttr.getValue().getValue();
                        log.debug("DipSOAP:     title=" + srTitle );
                    }

                    if( dxfAttr.getNs().equals("dip") &&
                        dxfAttr.getAc().equals("dip:0010") &&
                        dxfAttr.getValue()!=null ){
			
                        srAuthors = dxfAttr.getValue().getValue();
                    }
                    
                    if( dxfAttr.getNs().equals("dip") &&
                        dxfAttr.getAc().equals("dip:0009") &&
                        dxfAttr.getValue()!=null ){
			
                        srJTitle = dxfAttr.getValue().getValue();
                    }

                    if( dxfAttr.getNs().equals("dip") &&
                        dxfAttr.getAc().equals("dip:0011") &&
                        dxfAttr.getValue()!=null ){
			
                        srVolume = dxfAttr.getValue().getValue();
                    }

                    if( dxfAttr.getNs().equals("dip") &&
                        dxfAttr.getAc().equals("dip:0012") &&
                        dxfAttr.getValue()!=null ){
			
                        srIssue = dxfAttr.getValue().getValue();
                    }
                    
                    if( dxfAttr.getNs().equals("dip") &&
                        dxfAttr.getAc().equals("dip:0015") &&
                        dxfAttr.getValue()!=null ){
			
                        srPages = dxfAttr.getValue().getValue();
                    }

                    if( dxfAttr.getNs().equals("dip") &&
                        dxfAttr.getAc().equals("dip:0013") &&
                        dxfAttr.getValue()!=null ){
			
                        srYear = dxfAttr.getValue().getValue();

                        try{
                            srIYear = Integer.parseInt( srYear );
                        } catch(Exception ee){
                            // year format problems...
                        }
                    }

                    if( dxfAttr.getNs().equals("dip") &&
                        dxfAttr.getAc().equals("dip:0014") &&
                        dxfAttr.getValue()!=null ){
			
                        srAbst = dxfAttr.getValue().getValue();

                        try{

                            srAbst = srAbst.replaceAll("^\\s+","");
                            srAbst = srAbst.replaceAll("^\\s+$","");
                            srAbst = srAbst.replaceAll("\\s+"," ");
                            
                        } catch(Exception ee){
                            // should not happen...
                        }

                    }
                }
            }
            
            //------------------------------------------------------------------
            
            if( srTitle.equals("") && srAuthors.equals("") 
                && srPmid.equals("") ) continue;
    
            if(ddsDAO==null){
                log.debug("DipSOAP:   Creating DataSrcDAO...");
                ddsDAO=new DipDataSrcDAO();
            }
		
            DipDataSrc dds = null;

            if( srAc != null ){
                try{
                    long srLAc = Long.parseLong( srAc.replaceAll("\\D","") );
                    log.debug("DipSOAP:     ac(long)=" + srLAc );

                    dds = ddsDAO.find(srLAc);

                } catch(Exception ee){
                    // year format problems...
                }
            }
            
            if( ! srPmid.equals( "" ) && !srPmid.equals("N/A") ){
                DipDataSrc pmidDds = ddsDAO.findByPmid( srPmid );

                // skip: pmids does not match 
                //---------------------------

                if( dds != null && pmidDds != null 
                    && dds.getId() != pmidDds.getId() ) continue; 

                if( dds == null ){
                    dds = pmidDds;
                }

            }
            
            // skip: missing record to update
            //-------------------------------
            if( dds == null  && mode.equals( "update" ) ) continue;
                
            if( dds == null ){
                dds = new DipDataSrc(); 
            }
            
            dds.setImexSrc( srImexSrc );
            dds.setPmid( srPmid );
            dds.setAuthors( srAuthors );
            dds.setTitle( srTitle );
            dds.setJname( srJTitle );
            dds.setVolume( srVolume );
            dds.setIssue( srIssue );
            dds.setPages( srPages );
            dds.setYear( srIYear );
            dds.setAbstract( srAbst );
            
            ddsDAO.saveOrUpdate( dds );
            
            log.debug("DipSOAP:   updated imex source");
            
        }
        return null;
    }
    
    public static edu.ucla.mbi.dxf14.DatasetType
	dropSource(String ns, String ac){
	
	Log log = LogFactory.getLog(DipDxfSet.class);
        log.debug("DipSOAP: dropEvidence called");
	
        DatasetType res = dxfFactory.createDatasetType();

	DipDataSrc dds=null;

	// test if datasource defined
	//---------------------------

	if(ddsDAO==null){
	    log.debug("DipSOAP:   Creating DataSrcDAO...");
	    ddsDAO=new DipDataSrcDAO();
	}
	
	if(ns!=null && ns.toLowerCase().equals("pubmed")){
	    dds=ddsDAO.findByPmid(ac);
	}

	if(ns!=null && ns.toLowerCase().equals("dip")){
	    String sid= ac.replaceAll("[^0-9]","");
	    try{
		dds=ddsDAO.find(new Integer(sid));
	    } catch(Exception e){}
	}
	
	if(dds==null){
	    // abort: no source
	    return res;
	}

	if(xDAO==null){
            log.debug("DipSOAP:   Creating DataSrcDAO...");
            xDAO=new EvidDAO();
        }

	List elist= xDAO.findByDataSrc(dds);
	if(elist!=null && elist.size()>0){
	    // abort: evidence found 
            return res;
	}

	// drop if source not null & no evid

	ddsDAO.delete(dds);
	
	log.debug("DipSOAP: DONE:dropEvidence");
        return res;	
    }
    
    //--------------------------------------------------------------------------

    public static edu.ucla.mbi.dxf14.DatasetType
	setLink( edu.ucla.mbi.dxf14.DatasetType reqNodes ){
	
	Log log = LogFactory.getLog(DipDxfSet.class);
	log.debug("DipSOAP: setLink called");
	
	log.debug("DipSOAP:    node number:  "+reqNodes.getNode().size());

	int cn=0;
	int _id=0;
	
	DatasetType res = dxfFactory.createDatasetType();
	
	// go over nodes
	
	for(Iterator i=reqNodes.getNode().iterator();i.hasNext();){
	    
	    NodeType dxfNode= (NodeType)i.next();
	    
	    log.debug("DipSOAP:    ------------------------ "); 
	    log.debug("DipSOAP:    node["+cn+"]");
	    log.debug("DipSOAP:    node(label): "+dxfNode.getLabel()); 
	    
	    String ndTest=null;

	    cn++;
	    
	    // test if link 
	    //-------------

	    if(dxfNode.getType().getNs().equals("dxf") &&
	       dxfNode.getType().getAc().equals("dxf:0004")){
		
		String ndLabel=dxfNode.getLabel();
		String ndName =dxfNode.getName();
		
		// test if targeted to dip with no accession
		
		if(dxfNode.getNs().equals("dip") &&
		   dxfNode.getAc().equals("")){

		    log.debug("DipSOAP:    node(name): "+dxfNode.getName()); 
		    log.debug("DipSOAP:    node(type): "+dxfNode.getType().getAc()); 
		    log.debug("DipSOAP:    node(ns)  : "+dxfNode.getNs()); 
		    log.debug("DipSOAP:    node(ac)  : "+dxfNode.getAc()); 

		    // get test attribute
		    //-------------------

		    if(dxfNode.getAttrList()!=null){
                        log.debug("DipSOAP:    link:attrlist");
			if(dxfNode.getAttrList()!=null){

			    log.debug("DipSOAP:    link:xattrlist");
			    
			    for(Iterator j=dxfNode.getAttrList().getAttr().iterator();
                                j.hasNext();){
				
				AttrType dxfAttr= (AttrType)j.next();
				if(dxfAttr.getName().equals("soap_test")){
				    ndTest=dxfAttr.getValue().getValue();
                                }
			    }
                        }
		    }
		    
		    // collect distinct linked parts
		    //------------------------------
		    boolean dipOnly=true;
		    Set acSet = new HashSet();
		    
		    if(dxfNode.getPartList()!=null){

			log.debug("DipSOAP:    node:partlist");

			for(Iterator j=dxfNode.getPartList().getPart().iterator();
			    j.hasNext();){

			    PartType dxfPart= (PartType)j.next();
			    log.debug("DipSOAP:     lnode: "+dxfPart.getNode().getNs());
			    log.debug("DipSOAP:     lnode: "+dxfPart.getNode().getAc());
			    if(!dxfPart.getNode().getNs().equals("dip")){
				dipOnly=false;
			    } else{
				acSet.add(dxfPart.getNode().getAc());
			    }
			}
		    }

		    // test if nodes defined in DIP
		    //-----------------------------
		    
		    boolean dipDef=true;
		    Set ndSet   = new HashSet();
		    Set ndIdSet = new HashSet();
		    
		    if(dipOnly && acSet.size()>0){
			for(Iterator k = acSet.iterator();k.hasNext();){
			    
			    String cac=(String)k.next();
			    cac=cac.replaceAll("[^0-9]","");
			    try{
				Long lnd = Long.valueOf(cac);
				if(lnd.longValue()>0){
				    
				    if(nDAO==null){
					log.debug("DipSOAP:   Creating NodeDAO...");
					nDAO=new NodeDAO();
				    }
				    
				    DipNode cnd= nDAO.find(lnd);
				    if(cnd!=null){
					ndSet.add(cnd);
					ndIdSet.add(lnd);
					log.debug("DipSOAP:   Node found: "+lnd);
				    } else{
					dipDef=false;
				    }
				} else {
				    dipDef=false;
				}
			    } catch(Exception ex){
				dipDef=false;
				log.info(ex,ex);
			    }
			}
		    }
		    
		    log.debug("DipSOAP:   node search done");
		    
		    if(dipDef && ndSet.size()>0){
			
			// test if link already defined
			//-----------------------------

			if(lDAO==null){
			    log.debug("DipSOAP:   Creating LinkDAO...");
			    lDAO=new LinkDAO();
			}

			List lnLst=lDAO.findByNodeIdSet(ndIdSet);
			log.debug("DipSOAP:   link search done");

			if(lnLst.size()==0){
		
			    // create new link
			    //----------------

			    log.debug("DipSOAP:   Creating Link...");
			    Link nLink= new Link();
			    
			    // set type to experimental
			    //-------------------------

			    if(cvtDAO==null){
				log.debug("DipSOAP:   Creating CvtDAO...");
				cvtDAO=new CvtDAO();
				log.debug("DipSOAP:   ...done");
			    }
			    
			    CvType nCvt = null;
			    List lCvt = cvtDAO.findByName("experimental");
                            if(lCvt.size()==1){
                                nCvt= (CvType) lCvt.get(0);
                            }
			    nLink.setCvType(nCvt);

                            
                            // set int type to assembly (MI:0914);
                            //-----------------------------------

                            if(cvTermDAO==null){
                                log.debug("DipSOAP:   Creating CvTermDAO...");
                                cvTermDAO = new CvTermDAO();
                            }
                             
                            CvTerm cit =  cvTermDAO.find( "MI:0914" );
                            nLink.setCvIntType( cit );
                            nLink.setCvIntCoreType( cit );

			    log.debug("DipSOAP:    CvType/CvIntType/CvIntCoreType set");

			    // initialize & fill linked node set
			    //----------------------------------

			    nLink.setLnode(new HashSet());
			    int lnc=0;

			    for(Iterator k = ndSet.iterator();k.hasNext();){

				DipNode cnd=(DipNode)k.next();

				log.debug("DipSOAP:    prepare LNode ");

				LNode lnd = new LNode();
				lnd.setNode(cnd);
				
				log.debug("DipSOAP:    add LNode: "+lnd.getNode().getAccession());
				lnc++;
				
				nLink.getLnode().add(lnd);
			    }

			    // set node count
			    //---------------
			    nLink.setNodeCount(lnc);
			    
			    // submit
			    //-------
			    log.debug("DipSOAP:    LNode list set");

			    if(ndTest==null){
  
				lDAO.create(nLink);
			    
				// load/return added link
				//-----------------------
				long id= nLink.getId();
				Link newLink= lDAO.find(id);
				DxfLevel mode=DxfLevel.fromString("full");
				res.getNode().add(DipDxfUtil.dip2dxf(newLink,_id++,mode));
				
                                log.debug("DipSOAP:    created new nlink: ID-> "
					  + newLink.getId());
			    } else {

				String testAc=ndTest.replaceAll("[^0-9]","");
				Long testId=Long.parseLong(testAc);
				
				nLink.setId(testId);
				DxfLevel mode=DxfLevel.fromString("full");
				res.getNode().add(DipDxfUtil.dip2dxf(nLink,_id++,mode));
				
				log.debug("DipSOAP:    test link: ID-> "
					    + nLink.getId());
			    }
			    
			} else {
			    if(lnLst.size()==1){
				
				// link already exists
				//--------------------

				log.info("DipSOAP:   Link exists: "
					  +((Link)lnLst.get(0)).getAccession());
				DxfLevel mode=DxfLevel.fromString("full");
				res.getNode().add(DipDxfUtil.dip2dxf((Link)lnLst.get(0),_id++,mode));
			    } else{

				// node list ambigious
				//--------------------
			    }
			}
		    }
		}	
	    }
	    log.debug("DipSOAP:    ------------------------ "); 
	}

        log.debug("DipSOAP: DONE:setLink\n");
        return res;
    }

    //--------------------------------------------------------------------------    

    public static edu.ucla.mbi.dxf14.DatasetType 
	setNode( edu.ucla.mbi.dxf14.DatasetType request,
                 String set_mode ){
	
	Log log = LogFactory.getLog(DipDxfSet.class);
        log.debug("DipDxfSet: setNode called");	
	log.debug("DipDxfSet:  node count:  "+request.getNode().size());
	log.debug("DipDxfSet:  mode: "+set_mode);
        
	int cn=0;
      	int _id=0;
	
	DatasetType res = dxfFactory.createDatasetType();
	
	// go over nodes
	//--------------

	for(Iterator i=request.getNode().iterator();i.hasNext();){
	    
	    NodeType dxfNode= (NodeType)i.next();
	    
	    log.debug("DipDxfSet:    ------------------------ "); 
	    log.debug("DipDxfSet:    node["+cn+"]");
	    log.debug("DipDxfSet:    node(label): "+dxfNode.getLabel()); 
	    
	    cn++;
	    
	    // test if protein 
	    
	    if(dxfNode.getType().getNs().equals("dxf")){
		if(dxfNode.getType().getAc().equals("dxf:0003")){
		
		    DipNode nNd = DipDxfSet.buildProteinNode( dxfNode, set_mode );
		    if( nNd!=null ){
			// add DipNode to result dataset
			//------------------------------
			
			DxfLevel mode = DxfLevel.fromString("full");
			res.getNode().add( DipDxfUtil.dip2dxf(nNd,_id++, mode ));
		    }
		}
                
		if( dxfNode.getType().getAc().equals("dxf:0025") ){
		    
		    DipNode nNd = DipDxfSet.buildGeneNode(dxfNode);
		    if(nNd!=null){
			// add DipNode to result dataset
			//------------------------------
                        
			DxfLevel mode=DxfLevel.fromString("full");
			res.getNode().add(DipDxfUtil.dip2dxf(nNd,_id++, mode));
		    }
		}

		if(dxfNode.getType().getAc().equals("dxf:0028")){
		    
		    DipNode nNd = DipDxfSet.buildMoleculeNode(dxfNode);
		    
		    if(nNd!=null){
			
			// add DipNode to result dataset
			//------------------------------
			
			DxfLevel mode=DxfLevel.fromString("full");
			res.getNode().add(DipDxfUtil.dip2dxf(nNd,_id++, mode));
		    }
		}
	    }
	    log.debug("DipDxfSet:    ------------------------ "); 
	}
	
	log.debug("DipDxfSet: DONE:setNode(s)\n");
	return res;
    }
    
    private static DipNode buildGeneNode(NodeType dxfNode){
	return null;
    }
    
    private static DipNode buildMoleculeNode(NodeType dxfNode){
	return null;
    }
    
    private static DipNode buildProteinNode(NodeType dxfNode,
					    String mode){

	Log log = LogFactory.getLog(DipDxfSet.class);
	
	String ndLabel=dxfNode.getLabel();
	String ndName =dxfNode.getName();
		
	DipNode oldNd=null;
	
	if(dxfNode.getNs().equals("dip") &&
	   dxfNode.getAc().length()>0){
	    
	    // dip accession not empty
	    //------------------------

	    // - get old node
	    if(nDAO==null){
		log.debug("DipDxfSet:   Creating NodeDAO...");
		nDAO=new NodeDAO();
		log.debug("DipDxfSet:   ...done");
	    }
	    
	    String sId=dxfNode.getAc().replaceAll("[^0-9]","");
	    oldNd= nDAO.find(new Integer(sId));
	    
	    if(mode!=null && 
	       mode.toLowerCase().equals("update")){
		log.debug("DipDxfSet:   updating node: "+dxfNode.getAc());
	    } else {
		return oldNd;
	    }
	}
	
	if(dxfNode.getNs().equals("dip")){ 
	    // && dxfNode.getAc().equals("")){
	    
	    // test if targeted to dip with no accession

	    log.debug("DipDxfSet:    node(name): "+dxfNode.getName()); 
	    log.debug("DipDxfSet:    node(type): "+dxfNode.getType().getAc()); 
	    log.debug("DipDxfSet:    node(ns)  : "+dxfNode.getNs()); 
	    log.debug("DipDxfSet:    node(ac)  : "+dxfNode.getAc()); 

	    // protein:
	    //  - get UniProt/RefSeq/taxid

	    String ndTxId="";
	    String ndUnPr="";
	    String ndRfSq="";
	    String ndGene="";
	    String ndSeq="";
	    String ndTest=null;
	    
	    if(dxfNode.getXrefList()!=null){
		
		log.debug("DipDxfSet:    node:xreflist");

		for(Iterator j=dxfNode.getXrefList().getXref().iterator();
		    j.hasNext();){
		    
		    XrefType dxfXref= (XrefType)j.next();
		    
		    if(dxfXref.getTypeNs().equals("dxf") &&
		       dxfXref.getTypeAc().equals("dxf:0007") &&
		       dxfXref.getNs().toLowerCase().equals("taxid")){
			
			ndTxId=dxfXref.getAc();
		    } else {
			if(dxfXref.getTypeNs().equals("dxf") &&
			   (dxfXref.getTypeAc().equals("dxf:0006")  ||  // instnace-of
			    dxfXref.getTypeAc().equals("dxf:0009")  ||  // identical
			    dxfXref.getTypeAc().equals("dxf:0018"))  // related-to
			   ){
			    if(dxfXref.getNs().toLowerCase().equals("uniprot")){
				ndUnPr=dxfXref.getAc();
			    }
			    if(dxfXref.getNs().toLowerCase().equals("refseq")){
				ndRfSq=dxfXref.getAc();
			    }

			}
			if(dxfXref.getTypeNs().equals("dxf") &&
			   dxfXref.getTypeAc().equals("dxf:0022")){
			    if(dxfXref.getNs().toLowerCase().equals("entrezgene")){
				ndGene=dxfXref.getAc();
			    }
			}
		    }
		}
	    }
	    
	    if(dxfNode.getAttrList()!=null){
		
		log.debug("DipSOAP:    node:attrlist");
		if(dxfNode.getAttrList()!=null){
		    
		    log.debug("DipSOAP:    node:xattrlist");
		    for(Iterator j=dxfNode.getAttrList().getAttr().iterator();
			j.hasNext();){
			
			AttrType dxfAttr= (AttrType)j.next();
			if(dxfAttr.getAc().equals("dip:0008")){
			    ndSeq=dxfAttr.getValue().getValue();
			}
			
			if(dxfAttr.getName().equals("soap_test")){
			    ndTest=dxfAttr.getValue().getValue();
			}
		    }
		}
	    }
	    
	    // cleanup fields
	    //---------------
	    
	    ndTxId=ndTxId.replaceAll("\\s+","");
	    ndUnPr=ndUnPr.replaceAll("\\s+","");
	    
	    ndRfSq=ndRfSq.replaceAll("\\s+","");
	    ndRfSq=ndRfSq.replaceAll("\\.\\d+","");   // remove version
	    
	    ndSeq=ndSeq.replaceAll("\\s+","").toUpperCase();
	    
	    log.debug("DipDxfSet:    node(TxId): >"+ndTxId+"<");
	    log.debug("DipDxfSet:    node(UnPr): >"+ndUnPr+"<");
	    log.debug("DipDxfSet:    node(RfSq): >"+ndRfSq+"<");
	    log.debug("DipDxfSet:    node(seq) : >"+ndSeq+"<");
	    
	    // -test if name/(UniProt/RefSeq/sequence)/taxid if not empty
                                                                           
	    if(ndTxId.length()>0  &&
	       (ndUnPr.length()>0 || ndRfSq.length()>0 || 
		ndGene.length()>0 || ndSeq.length()>0)  &&
	       ndName.length()>0){
		
		if(nDAO==null){
		    log.debug("DipDxfSet:   Creating NodeDAO...");
		    nDAO=new NodeDAO();
		    log.debug("DipDxfSet:   ...done");
		}
		
		if(oDAO==null){
		    log.debug("DipDxfSet:   Creating OrganismDAO...");
		    oDAO=new OrganismDAO();
		    log.debug("DipDxfSet:   ...done");
		}
		
		if(cvtDAO==null){
		    log.debug("DipDxfSet:   Creating CvtDAO...");
		    cvtDAO=new CvtDAO();
		    log.debug("DipDxfSet:   ...done");
		}
		
		boolean subOK = false;
		
		//  test UniProt/RefSeq
		
		List upTst = new ArrayList();
		if(ndUnPr.length()>0){
		    log.debug("DipDxfSet:     findByUniProt : >"+ndUnPr+"<");
		    upTst = nDAO.findByUniProt(ndUnPr);
		}
		
		List rsTst = new ArrayList();
		if(ndRfSq.length()>0){
		    log.debug("DipDxfSet:     findByRefSeq : >"+ndRfSq+"<");
		    rsTst = nDAO.findByRefSeq(ndRfSq);
		}
		
		List seqTst = new ArrayList();
		if(ndSeq.length()>0){
		    log.debug("DipDxfSet:     findBySequence : >"+ndSeq+"<");
		    seqTst = nDAO.findBySequence(ndSeq);
		}
		
		log.debug("DipDxfSet:       found: "+upTst.size()+
			  "  :  "+rsTst.size()+"  :  "+seqTst.size());
		
		if(upTst.size()==0 &&
		   rsTst.size()==0 &&
		   seqTst.size()==0){
		    subOK=true;
		} else {
		    // test species o'lap here
		}
		
		if(subOK || oldNd!=null){
		    log.debug("DipDxfSet:  node debug complete: SUBMITTING");
		    
		    // get organism
		    //-------------
		    Organism nOrg = null;
		    List lOrg = oDAO.findByTaxId(ndTxId);
		    log.debug("DipDxfSet:     lOrg.size->"+lOrg.size());
		    if(lOrg.size()>0){
			nOrg= (Organism) lOrg.get(0);
		    } else {
			nOrg=new Organism();

			try{
			    long ltx=Long.parseLong(ndTxId);
			    
			    nOrg.setTaxId(ltx);
			    oDAO.create(nOrg);
			    log.debug("DipDxfSet:     new organism: taxid->"+ndTxId);
			    lOrg = oDAO.findByTaxId(ndTxId);
			    if(lOrg.size()>0){
				nOrg= (Organism) lOrg.get(0);
			    }
			} catch(Exception e){
			}
		    }
		    
		    // get cvtype
		    //-----------
		    
		    CvType nCvt = null;
		    List lCvt = cvtDAO.findByName("protein"); 
		    if(lCvt.size()==1){
			nCvt= (CvType) lCvt.get(0);
		    }
		    log.debug("DipDxfSet:     lCvt.size->"+lCvt.size());
		    
		    if(nOrg!=null &&  nCvt!=null){
			
			// create/save new node
			//---------------------
			
			DipNode nNd = new DipNode();
			if(oldNd!=null){
			    nNd=oldNd;
			}

			nNd.setOrganism(nOrg);
			nNd.setCvType(nCvt);
			
			if(ndLabel==null){
			    ndLabel="";
			} else {
			    if(ndLabel.length()>16){
				ndLabel=ndLabel.substring(0,13)+"...";
			    }
			}
			
			nNd.setLabel(ndLabel);
			nNd.setName(ndName);
			
			nNd.setRefSeq(ndRfSq);
			nNd.setUniProt(ndUnPr);
			nNd.setEntrezGene(ndGene);
			
			if(ndRfSq.length()==0 && ndUnPr.length()==0){
			    // set sequence only when no refseq/uniprot
			    //-----------------------------------------
			    nNd.setSequence(ndSeq);

			} else {
			    nNd.setSequence("");
			}
			
			if(ndTest==null){
			    
			    nDAO.saveOrUpdate(nNd);
			    log.debug("DipDxfSet:    created new node: ID-> "
				      + nNd.getId());
			} else {
			    
			    String testAc=ndTest.replaceAll("[^0-9]","");
			    Long testId=Long.parseLong(testAc);
                            
			    nNd.setId(testId);
			    log.debug("DipDxfSet:    test node: ID-> "
				     + nNd.getId());
			}
			return nNd;
		    }
		} else {
		    log.debug("DipDxfSet:    DIP OVERLAP DETECTED");
		}
	    } 
	}
	return null;
    }
}
