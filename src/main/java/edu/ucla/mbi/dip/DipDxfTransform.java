package edu.ucla.mbi.dip;
 
/*  #==================================================================
    # $Id:: DipDxfTransform.java 1886 2011-10-09 18:20:16Z lukasz     $
    # Version: $Rev:: 1886                                            $
    #==================================================================
    # DipDxfTransform 
    #
    #================================================================== 
*/


import java.util.*;
import java.io.*;
import org.w3c.dom.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.hibernate.*;

import edu.ucla.mbi.dip.*;
import edu.ucla.mbi.dxf14.*;
import edu.ucla.mbi.orm.*;


import javax.xml.bind.*;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.GregorianCalendar;
import java.util.List;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.datatype.DatatypeConfigurationException;

// import java content classes generated by binding compiler

import static javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;

import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.xml.sax.*;
import javax.xml.namespace.*;

public class DipDxfTransform{
    
    static NodeDAO     nDAO = null;
    static LNodeDAO   lnDAO = null;
    static OrganismDAO oDAO = null;
    static CvtDAO      cvtDAO    = null;
    static CvTermDAO   cvTermDAO = null;
    static LinkDAO     lDAO = null;
    static EvidDAO     xDAO = null;
    static DataSrcDAO  sDAO = null;

    static ImexSRecDAO     imexDAO = null;
    static DipSRecDAO   dipSRecDAO = null;

    static String path="";
    static String schemaFile=path+"DXF1.4.xsd";
    
    public static edu.ucla.mbi.dxf14.DatasetType
	transform(edu.ucla.mbi.dxf14.DatasetType indoc, 
		  String expand,String detail){
	
        Log log = LogFactory.getLog(DipDxfTransform.class);
        log.debug("DipDxf: transform called");
	
	log.debug("DipDxf: expand="+expand);

	DxfLevel mode=DxfLevel.fromString(detail);
	//int mode=0;
	//if(detail.equals("stub")){ mode=0; }
	//if(detail.equals("base")){ mode=1; }
	//if(detail.equals("mit" )){ mode=2; }

	List ndList= new ArrayList();

	Document doc= null;
	
	DatasetType reqSet=indoc;

	//= DipDxfUtil.req2dts(DipDxfUtil.getSingleNode(request,"dataset"));
	
	int cn=0;
        long maxId=-1;

	// go over data source nodes 
        // 
        //   - id pmid nodes present look/add proteins 
        //     & interactions
       
        for(int i=0;i<reqSet.getNode().size();i++){ 
	    
            NodeType dxfNode= (NodeType)reqSet.getNode().get(i);  

            log.debug("DipSOAP:    ------------------------ ");
            log.debug("DipSOAP:    node["+cn+"]");
            log.debug("DipSOAP:    node(label): "+dxfNode.getLabel());

            if(dxfNode.getId()>maxId){ maxId=dxfNode.getId();}
            cn++;

	    // test if data source
            //--------------------

            if(dxfNode.getType().getNs().equals("dxf") &&
               dxfNode.getType().getAc().equals("dxf:0016")){
        

		// search for node
                //----------------
                DipNode dipNode = null;

                String qns = dxfNode.getNs();
                String qac = dxfNode.getAc();


                // by PMID accession
                //------------------

                if(qns.toLowerCase().equals("pubmed") &&
                   !qac.equals("")){

                    int dAcc=Integer.valueOf(qac.replaceAll("[^0-9]",""));

                    if(dAcc>0){
			
			// getting DIP Nodes
			//------------------
			
                        log.debug("DipSOAP:  Getting DIP Node by PMID: ac=\""+
                                     qac+"\"  (id=\""+dAcc+"\")");

                        if(nDAO==null){
                            log.debug("DipSOAP:   Creating NodeDAO...");
                            nDAO=new NodeDAO();
                            log.debug("DipSOAP:   ...done");
                        }
                        
			List ndl= nDAO.findByXref(qns,qac);

			if(ndl.size()>0){

			    for(int ni=0; ni<ndl.size();ni++){
				DipNode cDipNode= (DipNode) ndl.get(ni);
				
                                // append node as xref 
                                //--------------------
				
                                log.debug("DipSOAP:  node found: "+cDipNode.getAccession());  

				//<ns1:xref ac="9606" ns="TaxId" 
                                //          type="produced-by" 
                                //          typeAc="dxf:0007" typeNs="dxf">

				
				edu.ucla.mbi.dxf14.NodeType nn = 
				    DipDxfUtil.dip2dxf(cDipNode,maxId++,mode);

	  // - completely new                          : create a new node
	  // - already present but with different id   :
          //        - added on by another server       :
          //        - added on the initial scan        : 
 
				log.debug("DipSOAP:   node overlap check...");

				List<NodeType> eqn= DXF.findEqNode(reqSet,nn);

				log.debug("DipSOAP:   eqns found: "+eqn.size());
				
				
				for(int cti=0;cti<eqn.size();cti++){
				    
				    log.debug("DipSOAP:   fixing overlap...");

				    NodeType ctn=eqn.get(cti);

				    if(!ctn.getAc().equals(nn.getAc()) ||
				       ctn.getNs().equals(nn.getNs())){
				       
					ctn.setAc(nn.getAc());
					ctn.setAttrList(nn.getAttrList());
					ctn.setId(nn.getId());
					ctn.setLabel(nn.getLabel());
					ctn.setName(nn.getName());
					ctn.setNs(nn.getNs());
					ctn.setPartList(nn.getPartList());
					ctn.setType(nn.getType());
					ctn.setXrefList(nn.getXrefList()); 
				    }
				}

				log.debug("DipSOAP:   olap fixed...");
				
				if(eqn==null || eqn.size()==0){
				    
				    DipDxfUtil.dxfAddXref(dxfNode,
					       "dip",cDipNode.getAccession(),   // ns , ac
					       "dxf","dxf:0022","describes",    // typeNs,typeAc,type
					       nn);        
				} else {
				    
				}
				
				log.debug("DipSOAP:   xref added...");
			    }
			}

                        
			// getting DIP Links
			//------------------

			if(lDAO==null){
			    log.debug("DipSOAP:   Creating LinkDAO...");
                            lDAO=new LinkDAO();
			    log.debug("DipSOAP:   ...done");
			}
                        

			log.debug("DipSOAP:   trying links through findByPubMedId: "+qac);

			List lnl= lDAO.findByPubMedId(qac);

			log.debug("DipSOAP:   #links found: "+lnl.size());

			if(lnl.size()>0){
			    for(int li=0; li<lnl.size();li++){
				Link cLink= (Link) lnl.get(li);
				
				edu.ucla.mbi.dxf14.NodeType ll =
                                    DipDxfUtil.dip2dxf(cLink,maxId++,mode);
				
				log.debug("DipSOAP:   link overlap check...");
				
				
                                List<NodeType> eqn= DXF.findEqNode(reqSet,ll);
				
				log.debug("DipSOAP:   eqns found: "+eqn.size());
				
				log.debug("DipSOAP:   link found: "+cLink.getAccession());

				if(eqn==null || eqn.size()==0){
				    // append link 
				    //------------
				
				    DipDxfUtil.dxfAddXref(dxfNode,
					       "dip",cLink.getAccession(),   // ns , ac
					       "dxf","dxf:0022","describes",    // typeNs,typeAc,type
					       ll);				
				    log.debug("DipSOAP:  link appended: "+cLink.getAccession());  
				}else {
				    log.debug("DipSOAP:  link duplicate skipped: "+cLink.getAccession());
				}	
			    }
			}
		    }
		}
	    }
	}    

  	log.debug("DipSOAP:  data sources done");	
 
        // go over protein nodes
        //   - if dip id present look for node, read in from db, replace
        //     or remove, if not known
               
	// go over nodes
	//--------------

	for(Iterator i=reqSet.getNode().iterator();i.hasNext();){
	    
	    NodeType dxfNode= (NodeType)i.next();
	    
	    log.debug("DipSOAP:    ------------------------ "); 
	    log.debug("DipSOAP:    node["+cn+"]");
	    log.debug("DipSOAP:    node(label): "+dxfNode.getLabel()); 
	    
	    if(dxfNode.getId()>maxId){ maxId=dxfNode.getId();}
	    cn++;
	    
	    // test if protein 
	    //----------------

	    if(dxfNode.getType().getNs().equals("psi-mi") &&
	       dxfNode.getType().getAc().equals("MI:0326")){
		
		//String ndLabel=dxfNode.getLabel();
		//String ndName =dxfNode.getName();

		// search for node
		//----------------
		DipNode dipNode = null;

		String qns = dxfNode.getNs();
		String qac = dxfNode.getAc();


		// by DIP accession
		//-----------------

		if(qns.toLowerCase().equals("dip") &&
		   !qac.equals("")){
		    
		    int nInd=(qac.toUpperCase()).lastIndexOf("N");
		    int dAcc=Integer.valueOf(qac.replaceAll("[^0-9]",""));

		    if(dAcc>0 && nInd==qac.length()-1){
  
			log.debug("DipSOAP:  Getting DIP Node: ac=\""+qac+"\"  (id=\""+dAcc+"\")");
			
			if(nDAO==null){
			    log.debug("DipSOAP:   Creating NodeDAO...");
			    nDAO=new NodeDAO();
			    log.debug("DipSOAP:   ...done");
			}
			dipNode= nDAO.find(dAcc);
		    } 
		}

		// by RefSeq
		//----------
     
		if(dipNode==null && qns.toLowerCase().equals("refseq") &&
		   !qac.equals("")){
     
		    log.debug("DipSOAP:  Getting DIP Node: RefSeq=\""+qac+"\"");

		    if(nDAO==null){
			log.debug("DipSOAP:   Creating NodeDAO...");
			nDAO=new NodeDAO();
			log.debug("DipSOAP:   ...done");
		    }

		    List ndl= nDAO.findByRefSeq(qac);

		    if(ndl.size()>0){
			dipNode= (DipNode) ndl.get(0);
		    }
		}

		// by UniProt
		//-----------
		
		if(dipNode==null && qns.toLowerCase().equals("uniprot")){

		    log.debug("DipSOAP:  Getting DIP Node: UniProt=\""+qac+"\"");
		    
		    if(nDAO==null){
			log.debug("DipSOAP:   Creating NodeDAO...");
			nDAO=new NodeDAO();
			log.debug("DipSOAP:   ...done");
		    }
		    
		    List ndl= nDAO.findByUniProt(qac);
		    if(ndl.size()>0){
			dipNode= (DipNode) ndl.get(0);
		    }
		}
		
		// by other xref
		//--------------

		if(dipNode==null){

		    log.debug("DipSOAP:  Getting DIP Node: "+qns+"=\""+qac+"\"");

		    if(nDAO==null){
			log.debug("DipSOAP:   Creating NodeDAO...");
			nDAO=new NodeDAO();
			log.debug("DipSOAP:   ...done");
		    }

		    List ndl= nDAO.findByXref(qns,qac);

		    if(ndl.size()>0){
			dipNode= (DipNode) ndl.get(0);
		    }
		}
		
		if(dipNode!=null){

		    // ammend the node with DIP-derived info if one got found
		    //--------------------------------------------------------
		    
		    DipDxfUtil.dxfMod(dxfNode,dipNode,mode,qns,qac);
		} else {
		    
		}
	    }
	    
	    // res.getNode().add(dip2dxf(nNd,_id++,1));
	}
	

	// update maxId

	for(Iterator i=reqSet.getNode().iterator();i.hasNext();){
            NodeType dxfNode= (NodeType)i.next();
	    if(dxfNode.getId()>maxId){ maxId=dxfNode.getId();}
	}

	
        // go over edges
        //   - if vertices missing add
	
	for(Iterator i=reqSet.getNode().iterator();i.hasNext();){

            NodeType dxfNode= (NodeType)i.next();
	    
            log.debug("DipSOAP:    ------------------------ ");
            log.debug("DipSOAP:    node["+cn+"]");
            log.debug("DipSOAP:    node(label): "+dxfNode.getLabel());

            String ndTest=null;

            cn++;

            // test if link
            //-------------

	    if(dxfNode.getType().getNs().equals("dxf") &&
	       dxfNode.getType().getAc().equals("dxf:0004")){

                //String ndLabel=dxfNode.getLabel();
                //String ndName =dxfNode.getName();

		edu.ucla.mbi.dip.Link dipLink = null;

                
		String qns = dxfNode.getNs();
		String qac = dxfNode.getAc();

 
                // test if DIP interaction
		//------------------------

                if(qns.toLowerCase().equals("dip") &&
		   !qac.equals("")){
		    
		    // search by DIP accession
		    //------------------------
		    
		    int lInd=(qac.toUpperCase()).lastIndexOf("E");
		    int dAcc=Integer.valueOf(qac.replaceAll("[^0-9]",""));
		    
		    if(dAcc>0 && lInd==qac.length()-1){

			log.debug("DipSOAP:  Getting DIP Link: "+
				  "ac=\""+qac+"\"  (id=\""+dAcc+"\")");

			if(lDAO==null){
			    log.debug("DipSOAP:   Creating LinkDAO...");
			    lDAO=new LinkDAO();
			    log.debug("DipSOAP:   ...done");
			}
			dipLink= lDAO.find(dAcc);
		    }
		}
		
                // test if IMEx interaction
		//-------------------------
		
                if(dipLink== null && qns.toLowerCase().equals("imex") &&
		   !qac.equals("")){
		    
		    // search by IMEx accession
		    //-------------------------
		    
		    log.debug("DipSOAP:  Getting DIP Link (by IMEx Id): "+
			      "ac=\""+qac);
			
		    if(lDAO==null){
			log.debug("DipSOAP:   Creating LinkDAO...");
			lDAO=new LinkDAO();
			log.debug("DipSOAP:   ...done");
		    }

		    List linkLst= lDAO.findByImex254(qac);
		    
		    if(linkLst!=null && linkLst.size()>0){
			dipLink = (Link)linkLst.get(0);
		    }
		}
		if(dipLink!=null){
		    
		    // ammend the node with DIP-derived info if one got found
		    //--------------------------------------------------------
		    
		    maxId=DipDxfUtil.dxfMod(dxfNode,dipLink,mode,maxId,qns,qac);
		}
	    }
	}

        // if expand 
        // - go over protein nodes and add edges to all the nodes


	if(expand.equals("1")){
	
	    log.debug("\nDipSOAP:    Expanding: level->"+expand+"\n"); 

	    List expList = new ArrayList();  // expansion buffer

	    for(Iterator i=reqSet.getNode().iterator();i.hasNext();){
	    
		NodeType dxfNode= (NodeType) i.next();
	    
		log.debug("DipSOAP:    ------------------------ "); 
		log.debug("DipSOAP:    node["+cn+"]");
		log.debug("DipSOAP:    node(label): "+dxfNode.getLabel()); 
		
		if(dxfNode.getId()>maxId){ 
		    maxId=dxfNode.getId();
		}
		cn++;
	   
		// test if protein 
		//----------------

		if(dxfNode.getType().getNs().equals("psi-mi") &&
		   dxfNode.getType().getAc().equals("MI:0326")){
		    
		    // by DIP accession
		    //-----------------
		
		    if(dxfNode.getNs().toLowerCase().equals("dip") &&
		       !dxfNode.getAc().equals("")){
		    
			int nInd=(dxfNode.getAc().toUpperCase()).lastIndexOf("N");
			int dAcc=Integer.valueOf(dxfNode.getAc().replaceAll("[^0-9]",""));

			if(dAcc>0 && nInd==dxfNode.getAc().length()-1){
  
			    log.debug("DipSOAP:  Getting DIP Node: ac=\""+
					dxfNode.getAc()+
					"\"  (id=\""+dAcc+"\")");
			
			    if(nDAO==null){
				log.debug("DipSOAP:   Creating NodeDAO...");
				nDAO=new NodeDAO();
				log.debug("DipSOAP:   ...done");
			    }

			    // search for node
			    //----------------

			    DipNode dipNode = nDAO.find(dAcc);

			    if(dipNode!=null){
			
				if(lDAO==null){
				    log.debug("DipSOAP:   Creating LinkDAO...");
				    lDAO=new LinkDAO();
				    log.debug("DipSOAP:   ...done");
				}

				log.debug("DipSOAP:    got node... looking for edges\n");

				List ndId = new ArrayList();
				ndId.add(new Long(dipNode.getId()));
				
				List lList2=lDAO.findByNodeIdListMatch(ndId,2);
			    
				if(lList2!=null && lList2.size()>0){
				
				    for(Iterator li=lList2.iterator();li.hasNext();){
					Link  cl= (Link) li.next();				    
					expList.add(cl);
					// reqSet.getNode().add(dip2dxf(cl,maxId++,mode));
				    }
				}

				List lList1=lDAO.findByNodeIdListMatch(ndId,1);
				
				if(lList1!=null && lList1.size()>0){
				
				    for(Iterator li=lList1.iterator();li.hasNext();){
					Link  cl= (Link) li.next();
					expList.add(cl);
					// reqSet.getNode().add(dip2dxf(cl,maxId++,mode));
				    }
				}
			    }
			}   
			log.debug("DipSOAP:   processed  node...\n");
		    }		
		}
	    }
	
	    log.debug("\nDipSOAP:    Expansion buffer collected:");

	    if(expList!=null && expList.size()>0){
		log.debug("DipSOAP:     buffer size:"+expList.size());

		for(Iterator li=expList.iterator();li.hasNext();){
		    Link  cl= (Link) li.next();
		    //expList.add(cl);
		    log.debug("DipSOAP:     "+cl);
		    
		    reqSet.getNode().add(DipDxfUtil.dip2dxf(cl,maxId++,mode));
		}
	    }
	
	    log.debug("\nDipSOAP:    Expanding DONE\n");
	}
	
	//DatasetType reqSet
	    //    = req2dts(getSingleNode(request,"dataset"),logger);
	
	reqSet=DXF.reconcile(reqSet);   
	
	log.debug("DipDxf: DONE:transform");
	return reqSet;
    }
}

/*

class NamespaceContextImpl
    implements NamespaceContext{

    Log log = LogFactory.getLog(DipSOAPBindingTransformImpl.class);

    public String uri;
    public String prefix;


    public String getUri(){
	return uri;
    }

    public void setUri(String uri){
        this.uri=uri;
    }

    public String getNamespaceURI(String prefix){
        log.debug("getNamespaceURI: prefix "+uri);
        return uri;
    }

    public String getPrefix(String uri){
        log.debug("getNamespaceURI: uri "+uri);
        return prefix;
    }

    public Iterator getPrefixes(String uri){
        log.debug("getPrefixes: uri "+uri);
        return null;
    }

    public void setPrefix(String prefix){
        this.prefix=prefix;
    }
}
*/